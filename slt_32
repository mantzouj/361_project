library ieee;
use ieee.std_logic_1164.all;
use work.eecs361_gates.all;

entity slt_32 is  --tests whether x is < y.  If x < y, return 1, else return 0. 
    port(
          x : in std_logic_vector(31 downto 0); 
          y : in std_logic_vector(31 downto 0); 
          z : out std_logic_vector(31 downto 0);
          overflow: out std_logic;
          cout: out std_logic --do we need a cout? 
           );
          
      end slt_32;
      
architecture structural of slt_32 is
    
    component full_adder_subtractor_32 is  
        port(
              x : in std_logic_vector(31 downto 0);
              y : in std_logic_vector(31 downto 0);
              control : in std_logic;
              z : out std_logic_vector(31 downto 0);
              cout : out std_logic;
              overflow: out std_logic
              );
              
          end component full_adder_subtractor_32;
          
          signal sub_result:std_logic_vector(31 downto 0);
          signal msb: std_logic;
          signal zero32: std_logic_vector(31 downto 0);
          signal zero: std_logic;
          signal one: std_logic;
          
          begin
         
          zero<='0';
          one<='1';
              
          GEN_32_BIT_ZERO: for I in 1 to 31 generate
          and0_map: and_gate port map(x=>zero,y=>zero, z=>zero32(I));
          end generate GEN_32_BIT_ZERO;
             
           
          sub1_map: full_adder_subtractor_32 port map (x=>x, y=>y, control=>one, z=>sub_result, cout=>cout, overflow=>overflow);  
          zero32(0)<=sub_result(31);
          z<=zero32; 
         
      end structural;  
          
          
    
    
