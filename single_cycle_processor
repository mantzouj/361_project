library ieee;
use ieee.std_logic_1164.all;
use work.eecs361_gates.all;

entity single_cycle_processor is
    port( a : in std_logic
    );

end single_cycle_processor;

architecture structural of single_cycle_processor is
   signal WRenable : std_logic;
   signal clk : std_logic;
   signal RA : std_logic_vector(4 downto 0);
   signal RB : std_logic_vector(4 downto 0);
   signal RW : std_logic_vector(4 downto 0);
   signal busW : std_logic_vector(31 downto 0);
   signal busA : std_logic_vector(31 downto 0);
   signal busB : std_logic_vector(31 downto 0);
   
   --register
   signal Din : std_logic_vector(31 downto 0);
   signal enable : std_logic;
   --clk
   --reset: in std_logic;
   signal Dout : std_logic_vector(31 downto 0);

begin
   reg       : entity work.register_32 port map (Din, clk, enable, Dout);
   regfile   : entity work.registerfile port map (WRenable, clk, RA, RB, RW, busW, busA, busB);
   
   process
   begin
      enable <= '1';   
      Din <= "10101010101010101010101010101010";
      clk <= '0';
      wait for 100 ns;
      clk <= '1';
      wait for 100 ns;
      clk <= '0';
      wait for 100 ns;
      clk <= '1';
      wait for 100 ns;
      clk <= '0';
      wait for 100 ns;
      Din <= "01010101010101010101010101010101";
      clk <= '1';
      wait for 100 ns;
      clk <= '0';
      wait;
   end process;
                    
end structural;
